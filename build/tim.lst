ARM GAS  /tmp/ccrgs2MM.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_TIM8_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_TIM8_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	MX_TIM8_Init:
  26              	.LFB142:
  27              		.file 1 "Src/tim.c"
   1:Src/tim.c     **** /**
   2:Src/tim.c     ****   ******************************************************************************
   3:Src/tim.c     ****   * File Name          : TIM.c
   4:Src/tim.c     ****   * Description        : This file provides code for the configuration
   5:Src/tim.c     ****   *                      of the TIM instances.
   6:Src/tim.c     ****   ******************************************************************************
   7:Src/tim.c     ****   * This notice applies to any and all portions of this file
   8:Src/tim.c     ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/tim.c     ****   * USER CODE END. Other portions of this file, whether 
  10:Src/tim.c     ****   * inserted by the user or by software development tools
  11:Src/tim.c     ****   * are owned by their respective copyright owners.
  12:Src/tim.c     ****   *
  13:Src/tim.c     ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  14:Src/tim.c     ****   * All rights reserved.
  15:Src/tim.c     ****   *
  16:Src/tim.c     ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/tim.c     ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/tim.c     ****   *
  19:Src/tim.c     ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/tim.c     ****   *    this list of conditions and the following disclaimer.
  21:Src/tim.c     ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/tim.c     ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/tim.c     ****   *    and/or other materials provided with the distribution.
  24:Src/tim.c     ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/tim.c     ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/tim.c     ****   *    derived from this software without specific written permission.
  27:Src/tim.c     ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/tim.c     ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/tim.c     ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/tim.c     ****   * 5. Redistribution and use of this software other than as permitted under 
  31:Src/tim.c     ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccrgs2MM.s 			page 2


  32:Src/tim.c     ****   *    this license. 
  33:Src/tim.c     ****   *
  34:Src/tim.c     ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/tim.c     ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/tim.c     ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/tim.c     ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/tim.c     ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/tim.c     ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/tim.c     ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/tim.c     ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/tim.c     ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/tim.c     ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/tim.c     ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/tim.c     ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/tim.c     ****   *
  47:Src/tim.c     ****   ******************************************************************************
  48:Src/tim.c     ****   */
  49:Src/tim.c     **** 
  50:Src/tim.c     **** /* Includes ------------------------------------------------------------------*/
  51:Src/tim.c     **** #include "tim.h"
  52:Src/tim.c     **** 
  53:Src/tim.c     **** /* USER CODE BEGIN 0 */
  54:Src/tim.c     **** 
  55:Src/tim.c     **** /* USER CODE END 0 */
  56:Src/tim.c     **** 
  57:Src/tim.c     **** TIM_HandleTypeDef htim1;
  58:Src/tim.c     **** TIM_HandleTypeDef htim2;
  59:Src/tim.c     **** TIM_HandleTypeDef htim3;
  60:Src/tim.c     **** TIM_HandleTypeDef htim5;
  61:Src/tim.c     **** TIM_HandleTypeDef htim8;
  62:Src/tim.c     **** TIM_HandleTypeDef htim12;
  63:Src/tim.c     **** 
  64:Src/tim.c     **** /* TIM1 init function */
  65:Src/tim.c     **** void MX_TIM1_Init(void)
  66:Src/tim.c     **** {
  67:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
  68:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
  69:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
  70:Src/tim.c     ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  71:Src/tim.c     **** 
  72:Src/tim.c     ****   htim1.Instance = TIM1;
  73:Src/tim.c     ****   htim1.Init.Prescaler = 0;
  74:Src/tim.c     ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  75:Src/tim.c     ****   htim1.Init.Period = 0;
  76:Src/tim.c     ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  77:Src/tim.c     ****   htim1.Init.RepetitionCounter = 0;
  78:Src/tim.c     ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  79:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  80:Src/tim.c     ****   {
  81:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  82:Src/tim.c     ****   }
  83:Src/tim.c     **** 
  84:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  85:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  86:Src/tim.c     ****   {
  87:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  88:Src/tim.c     ****   }
ARM GAS  /tmp/ccrgs2MM.s 			page 3


  89:Src/tim.c     **** 
  90:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  91:Src/tim.c     ****   {
  92:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
  93:Src/tim.c     ****   }
  94:Src/tim.c     **** 
  95:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  96:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  97:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  98:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  99:Src/tim.c     ****   {
 100:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 101:Src/tim.c     ****   }
 102:Src/tim.c     **** 
 103:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 104:Src/tim.c     ****   sConfigOC.Pulse = 0;
 105:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 106:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 107:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 108:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 109:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 110:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 111:Src/tim.c     ****   {
 112:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 113:Src/tim.c     ****   }
 114:Src/tim.c     **** 
 115:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 116:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 117:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 118:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = 0;
 119:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 120:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 121:Src/tim.c     ****   sBreakDeadTimeConfig.BreakFilter = 0;
 122:Src/tim.c     ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 123:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 124:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Filter = 0;
 125:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 126:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 127:Src/tim.c     ****   {
 128:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 129:Src/tim.c     ****   }
 130:Src/tim.c     **** 
 131:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim1);
 132:Src/tim.c     **** 
 133:Src/tim.c     **** }
 134:Src/tim.c     **** /* TIM2 init function */
 135:Src/tim.c     **** void MX_TIM2_Init(void)
 136:Src/tim.c     **** {
 137:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 138:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 139:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 140:Src/tim.c     **** 
 141:Src/tim.c     ****   htim2.Instance = TIM2;
 142:Src/tim.c     ****   htim2.Init.Prescaler = 0;
 143:Src/tim.c     ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 144:Src/tim.c     ****   htim2.Init.Period = 0;
 145:Src/tim.c     ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccrgs2MM.s 			page 4


 146:Src/tim.c     ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 147:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 148:Src/tim.c     ****   {
 149:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 150:Src/tim.c     ****   }
 151:Src/tim.c     **** 
 152:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 153:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 154:Src/tim.c     ****   {
 155:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 156:Src/tim.c     ****   }
 157:Src/tim.c     **** 
 158:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 159:Src/tim.c     ****   {
 160:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 161:Src/tim.c     ****   }
 162:Src/tim.c     **** 
 163:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 164:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 165:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 166:Src/tim.c     ****   {
 167:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 168:Src/tim.c     ****   }
 169:Src/tim.c     **** 
 170:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 171:Src/tim.c     ****   sConfigOC.Pulse = 0;
 172:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 173:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 174:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 175:Src/tim.c     ****   {
 176:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 177:Src/tim.c     ****   }
 178:Src/tim.c     **** 
 179:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim2);
 180:Src/tim.c     **** 
 181:Src/tim.c     **** }
 182:Src/tim.c     **** /* TIM3 init function */
 183:Src/tim.c     **** void MX_TIM3_Init(void)
 184:Src/tim.c     **** {
 185:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 186:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 187:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 188:Src/tim.c     **** 
 189:Src/tim.c     ****   htim3.Instance = TIM3;
 190:Src/tim.c     ****   htim3.Init.Prescaler = 0;
 191:Src/tim.c     ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 192:Src/tim.c     ****   htim3.Init.Period = 0;
 193:Src/tim.c     ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 194:Src/tim.c     ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 195:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 196:Src/tim.c     ****   {
 197:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 198:Src/tim.c     ****   }
 199:Src/tim.c     **** 
 200:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 201:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 202:Src/tim.c     ****   {
ARM GAS  /tmp/ccrgs2MM.s 			page 5


 203:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 204:Src/tim.c     ****   }
 205:Src/tim.c     **** 
 206:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 207:Src/tim.c     ****   {
 208:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 209:Src/tim.c     ****   }
 210:Src/tim.c     **** 
 211:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 212:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 213:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 214:Src/tim.c     ****   {
 215:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 216:Src/tim.c     ****   }
 217:Src/tim.c     **** 
 218:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 219:Src/tim.c     ****   sConfigOC.Pulse = 0;
 220:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 221:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 222:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 223:Src/tim.c     ****   {
 224:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 225:Src/tim.c     ****   }
 226:Src/tim.c     **** 
 227:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim3);
 228:Src/tim.c     **** 
 229:Src/tim.c     **** }
 230:Src/tim.c     **** /* TIM5 init function */
 231:Src/tim.c     **** void MX_TIM5_Init(void)
 232:Src/tim.c     **** {
 233:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 234:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 235:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 236:Src/tim.c     **** 
 237:Src/tim.c     ****   htim5.Instance = TIM5;
 238:Src/tim.c     ****   htim5.Init.Prescaler = 0;
 239:Src/tim.c     ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 240:Src/tim.c     ****   htim5.Init.Period = 0;
 241:Src/tim.c     ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 242:Src/tim.c     ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 243:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 244:Src/tim.c     ****   {
 245:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 246:Src/tim.c     ****   }
 247:Src/tim.c     **** 
 248:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 249:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 250:Src/tim.c     ****   {
 251:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 252:Src/tim.c     ****   }
 253:Src/tim.c     **** 
 254:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 255:Src/tim.c     ****   {
 256:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 257:Src/tim.c     ****   }
 258:Src/tim.c     **** 
 259:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
ARM GAS  /tmp/ccrgs2MM.s 			page 6


 260:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 261:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 262:Src/tim.c     ****   {
 263:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 264:Src/tim.c     ****   }
 265:Src/tim.c     **** 
 266:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 267:Src/tim.c     ****   sConfigOC.Pulse = 0;
 268:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 269:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 270:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 271:Src/tim.c     ****   {
 272:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 273:Src/tim.c     ****   }
 274:Src/tim.c     **** 
 275:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim5);
 276:Src/tim.c     **** 
 277:Src/tim.c     **** }
 278:Src/tim.c     **** /* TIM8 init function */
 279:Src/tim.c     **** void MX_TIM8_Init(void)
 280:Src/tim.c     **** {
  28              		.loc 1 280 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 89B0     		sub	sp, sp, #36
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 281:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 282:Src/tim.c     ****   TIM_MasterConfigTypeDef sMasterConfig;
 283:Src/tim.c     **** 
 284:Src/tim.c     ****   htim8.Instance = TIM8;
  39              		.loc 1 284 0
  40 0004 1948     		ldr	r0, .L9
  41 0006 1A4B     		ldr	r3, .L9+4
  42 0008 0360     		str	r3, [r0]
 285:Src/tim.c     ****   htim8.Init.Prescaler = 0;
  43              		.loc 1 285 0
  44 000a 0023     		movs	r3, #0
  45 000c 4360     		str	r3, [r0, #4]
 286:Src/tim.c     ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  46              		.loc 1 286 0
  47 000e 8360     		str	r3, [r0, #8]
 287:Src/tim.c     ****   htim8.Init.Period = 0;
  48              		.loc 1 287 0
  49 0010 C360     		str	r3, [r0, #12]
 288:Src/tim.c     ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  50              		.loc 1 288 0
  51 0012 0361     		str	r3, [r0, #16]
 289:Src/tim.c     ****   htim8.Init.RepetitionCounter = 0;
  52              		.loc 1 289 0
  53 0014 4361     		str	r3, [r0, #20]
 290:Src/tim.c     ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccrgs2MM.s 			page 7


  54              		.loc 1 290 0
  55 0016 8361     		str	r3, [r0, #24]
 291:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  56              		.loc 1 291 0
  57 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
  58              	.LVL0:
  59 001c A0B9     		cbnz	r0, .L6
  60              	.L2:
 292:Src/tim.c     ****   {
 293:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 294:Src/tim.c     ****   }
 295:Src/tim.c     **** 
 296:Src/tim.c     ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  61              		.loc 1 296 0
  62 001e 08A9     		add	r1, sp, #32
  63 0020 4FF48053 		mov	r3, #4096
  64 0024 41F8103D 		str	r3, [r1, #-16]!
 297:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  65              		.loc 1 297 0
  66 0028 1048     		ldr	r0, .L9
  67 002a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
  68              	.LVL1:
  69 002e 88B9     		cbnz	r0, .L7
  70              	.L3:
 298:Src/tim.c     ****   {
 299:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 300:Src/tim.c     ****   }
 301:Src/tim.c     **** 
 302:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  71              		.loc 1 302 0
  72 0030 0023     		movs	r3, #0
  73 0032 0193     		str	r3, [sp, #4]
 303:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  74              		.loc 1 303 0
  75 0034 0293     		str	r3, [sp, #8]
 304:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  76              		.loc 1 304 0
  77 0036 0393     		str	r3, [sp, #12]
 305:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  78              		.loc 1 305 0
  79 0038 01A9     		add	r1, sp, #4
  80 003a 0C48     		ldr	r0, .L9
  81 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
  82              	.LVL2:
  83 0040 70B9     		cbnz	r0, .L8
  84              	.L1:
 306:Src/tim.c     ****   {
 307:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 308:Src/tim.c     ****   }
 309:Src/tim.c     **** 
 310:Src/tim.c     **** }
  85              		.loc 1 310 0
  86 0042 09B0     		add	sp, sp, #36
  87              	.LCFI2:
  88              		.cfi_remember_state
  89              		.cfi_def_cfa_offset 4
  90              		@ sp needed
ARM GAS  /tmp/ccrgs2MM.s 			page 8


  91 0044 5DF804FB 		ldr	pc, [sp], #4
  92              	.L6:
  93              	.LCFI3:
  94              		.cfi_restore_state
 293:Src/tim.c     ****   }
  95              		.loc 1 293 0
  96 0048 40F22511 		movw	r1, #293
  97 004c 0948     		ldr	r0, .L9+8
  98 004e FFF7FEFF 		bl	_Error_Handler
  99              	.LVL3:
 100 0052 E4E7     		b	.L2
 101              	.L7:
 299:Src/tim.c     ****   }
 102              		.loc 1 299 0
 103 0054 40F22B11 		movw	r1, #299
 104 0058 0648     		ldr	r0, .L9+8
 105 005a FFF7FEFF 		bl	_Error_Handler
 106              	.LVL4:
 107 005e E7E7     		b	.L3
 108              	.L8:
 307:Src/tim.c     ****   }
 109              		.loc 1 307 0
 110 0060 40F23311 		movw	r1, #307
 111 0064 0348     		ldr	r0, .L9+8
 112 0066 FFF7FEFF 		bl	_Error_Handler
 113              	.LVL5:
 114              		.loc 1 310 0
 115 006a EAE7     		b	.L1
 116              	.L10:
 117              		.align	2
 118              	.L9:
 119 006c 00000000 		.word	htim8
 120 0070 00040140 		.word	1073808384
 121 0074 00000000 		.word	.LC0
 122              		.cfi_endproc
 123              	.LFE142:
 125              		.section	.text.HAL_TIM_Base_MspInit,"ax",%progbits
 126              		.align	1
 127              		.global	HAL_TIM_Base_MspInit
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 131              		.fpu fpv5-sp-d16
 133              	HAL_TIM_Base_MspInit:
 134              	.LFB144:
 311:Src/tim.c     **** /* TIM12 init function */
 312:Src/tim.c     **** void MX_TIM12_Init(void)
 313:Src/tim.c     **** {
 314:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 315:Src/tim.c     **** 
 316:Src/tim.c     ****   htim12.Instance = TIM12;
 317:Src/tim.c     ****   htim12.Init.Prescaler = 0;
 318:Src/tim.c     ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 319:Src/tim.c     ****   htim12.Init.Period = 0;
 320:Src/tim.c     ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 321:Src/tim.c     ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 322:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
ARM GAS  /tmp/ccrgs2MM.s 			page 9


 323:Src/tim.c     ****   {
 324:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 325:Src/tim.c     ****   }
 326:Src/tim.c     **** 
 327:Src/tim.c     ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 328:Src/tim.c     ****   sConfigOC.Pulse = 0;
 329:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 330:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 331:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 332:Src/tim.c     ****   {
 333:Src/tim.c     ****     _Error_Handler(__FILE__, __LINE__);
 334:Src/tim.c     ****   }
 335:Src/tim.c     **** 
 336:Src/tim.c     ****   HAL_TIM_MspPostInit(&htim12);
 337:Src/tim.c     **** 
 338:Src/tim.c     **** }
 339:Src/tim.c     **** 
 340:Src/tim.c     **** void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
 341:Src/tim.c     **** {
 135              		.loc 1 341 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 24
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140              	.LVL6:
 141 0000 86B0     		sub	sp, sp, #24
 142              	.LCFI4:
 143              		.cfi_def_cfa_offset 24
 342:Src/tim.c     **** 
 343:Src/tim.c     ****   if(tim_baseHandle->Instance==TIM1)
 144              		.loc 1 343 0
 145 0002 0368     		ldr	r3, [r0]
 146 0004 234A     		ldr	r2, .L22
 147 0006 9342     		cmp	r3, r2
 148 0008 16D0     		beq	.L18
 344:Src/tim.c     ****   {
 345:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 346:Src/tim.c     **** 
 347:Src/tim.c     ****   /* USER CODE END TIM1_MspInit 0 */
 348:Src/tim.c     ****     /* TIM1 clock enable */
 349:Src/tim.c     ****     __HAL_RCC_TIM1_CLK_ENABLE();
 350:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 351:Src/tim.c     **** 
 352:Src/tim.c     ****   /* USER CODE END TIM1_MspInit 1 */
 353:Src/tim.c     ****   }
 354:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM2)
 149              		.loc 1 354 0
 150 000a B3F1804F 		cmp	r3, #1073741824
 151 000e 1FD0     		beq	.L19
 355:Src/tim.c     ****   {
 356:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspInit 0 */
 357:Src/tim.c     **** 
 358:Src/tim.c     ****   /* USER CODE END TIM2_MspInit 0 */
 359:Src/tim.c     ****     /* TIM2 clock enable */
 360:Src/tim.c     ****     __HAL_RCC_TIM2_CLK_ENABLE();
 361:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspInit 1 */
 362:Src/tim.c     **** 
ARM GAS  /tmp/ccrgs2MM.s 			page 10


 363:Src/tim.c     ****   /* USER CODE END TIM2_MspInit 1 */
 364:Src/tim.c     ****   }
 365:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM3)
 152              		.loc 1 365 0
 153 0010 214A     		ldr	r2, .L22+4
 154 0012 9342     		cmp	r3, r2
 155 0014 28D0     		beq	.L20
 366:Src/tim.c     ****   {
 367:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspInit 0 */
 368:Src/tim.c     **** 
 369:Src/tim.c     ****   /* USER CODE END TIM3_MspInit 0 */
 370:Src/tim.c     ****     /* TIM3 clock enable */
 371:Src/tim.c     ****     __HAL_RCC_TIM3_CLK_ENABLE();
 372:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspInit 1 */
 373:Src/tim.c     **** 
 374:Src/tim.c     ****   /* USER CODE END TIM3_MspInit 1 */
 375:Src/tim.c     ****   }
 376:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM5)
 156              		.loc 1 376 0
 157 0016 214A     		ldr	r2, .L22+8
 158 0018 9342     		cmp	r3, r2
 159 001a 30D0     		beq	.L21
 377:Src/tim.c     ****   {
 378:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspInit 0 */
 379:Src/tim.c     **** 
 380:Src/tim.c     ****   /* USER CODE END TIM5_MspInit 0 */
 381:Src/tim.c     ****     /* TIM5 clock enable */
 382:Src/tim.c     ****     __HAL_RCC_TIM5_CLK_ENABLE();
 383:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspInit 1 */
 384:Src/tim.c     **** 
 385:Src/tim.c     ****   /* USER CODE END TIM5_MspInit 1 */
 386:Src/tim.c     ****   }
 387:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM8)
 160              		.loc 1 387 0
 161 001c 204A     		ldr	r2, .L22+12
 162 001e 9342     		cmp	r3, r2
 163 0020 14D1     		bne	.L11
 164              	.LBB2:
 388:Src/tim.c     ****   {
 389:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 0 */
 390:Src/tim.c     **** 
 391:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 0 */
 392:Src/tim.c     ****     /* TIM8 clock enable */
 393:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_ENABLE();
 165              		.loc 1 393 0
 166 0022 204B     		ldr	r3, .L22+16
 167 0024 5A6C     		ldr	r2, [r3, #68]
 168 0026 42F00202 		orr	r2, r2, #2
 169 002a 5A64     		str	r2, [r3, #68]
 170 002c 5B6C     		ldr	r3, [r3, #68]
 171 002e 03F00203 		and	r3, r3, #2
 172 0032 0593     		str	r3, [sp, #20]
 173 0034 059B     		ldr	r3, [sp, #20]
 174              	.LBE2:
 394:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspInit 1 */
 395:Src/tim.c     **** 
 396:Src/tim.c     ****   /* USER CODE END TIM8_MspInit 1 */
ARM GAS  /tmp/ccrgs2MM.s 			page 11


 397:Src/tim.c     ****   }
 398:Src/tim.c     **** }
 175              		.loc 1 398 0
 176 0036 09E0     		b	.L11
 177              	.L18:
 178              	.LBB3:
 349:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 179              		.loc 1 349 0
 180 0038 1A4B     		ldr	r3, .L22+16
 181 003a 5A6C     		ldr	r2, [r3, #68]
 182 003c 42F00102 		orr	r2, r2, #1
 183 0040 5A64     		str	r2, [r3, #68]
 184 0042 5B6C     		ldr	r3, [r3, #68]
 185 0044 03F00103 		and	r3, r3, #1
 186 0048 0193     		str	r3, [sp, #4]
 187 004a 019B     		ldr	r3, [sp, #4]
 188              	.L11:
 189              	.LBE3:
 190              		.loc 1 398 0
 191 004c 06B0     		add	sp, sp, #24
 192              	.LCFI5:
 193              		.cfi_remember_state
 194              		.cfi_def_cfa_offset 0
 195              		@ sp needed
 196 004e 7047     		bx	lr
 197              	.L19:
 198              	.LCFI6:
 199              		.cfi_restore_state
 200              	.LBB4:
 360:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspInit 1 */
 201              		.loc 1 360 0
 202 0050 03F50E33 		add	r3, r3, #145408
 203 0054 1A6C     		ldr	r2, [r3, #64]
 204 0056 42F00102 		orr	r2, r2, #1
 205 005a 1A64     		str	r2, [r3, #64]
 206 005c 1B6C     		ldr	r3, [r3, #64]
 207 005e 03F00103 		and	r3, r3, #1
 208 0062 0293     		str	r3, [sp, #8]
 209 0064 029B     		ldr	r3, [sp, #8]
 210              	.LBE4:
 211 0066 F1E7     		b	.L11
 212              	.L20:
 213              	.LBB5:
 371:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspInit 1 */
 214              		.loc 1 371 0
 215 0068 0E4B     		ldr	r3, .L22+16
 216 006a 1A6C     		ldr	r2, [r3, #64]
 217 006c 42F00202 		orr	r2, r2, #2
 218 0070 1A64     		str	r2, [r3, #64]
 219 0072 1B6C     		ldr	r3, [r3, #64]
 220 0074 03F00203 		and	r3, r3, #2
 221 0078 0393     		str	r3, [sp, #12]
 222 007a 039B     		ldr	r3, [sp, #12]
 223              	.LBE5:
 224 007c E6E7     		b	.L11
 225              	.L21:
 226              	.LBB6:
ARM GAS  /tmp/ccrgs2MM.s 			page 12


 382:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspInit 1 */
 227              		.loc 1 382 0
 228 007e 094B     		ldr	r3, .L22+16
 229 0080 1A6C     		ldr	r2, [r3, #64]
 230 0082 42F00802 		orr	r2, r2, #8
 231 0086 1A64     		str	r2, [r3, #64]
 232 0088 1B6C     		ldr	r3, [r3, #64]
 233 008a 03F00803 		and	r3, r3, #8
 234 008e 0493     		str	r3, [sp, #16]
 235 0090 049B     		ldr	r3, [sp, #16]
 236              	.LBE6:
 237 0092 DBE7     		b	.L11
 238              	.L23:
 239              		.align	2
 240              	.L22:
 241 0094 00000140 		.word	1073807360
 242 0098 00040040 		.word	1073742848
 243 009c 000C0040 		.word	1073744896
 244 00a0 00040140 		.word	1073808384
 245 00a4 00380240 		.word	1073887232
 246              		.cfi_endproc
 247              	.LFE144:
 249              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 250              		.align	1
 251              		.global	HAL_TIM_PWM_MspInit
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv5-sp-d16
 257              	HAL_TIM_PWM_MspInit:
 258              	.LFB145:
 399:Src/tim.c     **** 
 400:Src/tim.c     **** void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
 401:Src/tim.c     **** {
 259              		.loc 1 401 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL7:
 402:Src/tim.c     **** 
 403:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM12)
 265              		.loc 1 403 0
 266 0000 0268     		ldr	r2, [r0]
 267 0002 094B     		ldr	r3, .L31
 268 0004 9A42     		cmp	r2, r3
 269 0006 00D0     		beq	.L30
 270 0008 7047     		bx	lr
 271              	.L30:
 401:Src/tim.c     **** 
 272              		.loc 1 401 0
 273 000a 82B0     		sub	sp, sp, #8
 274              	.LCFI7:
 275              		.cfi_def_cfa_offset 8
 276              	.LBB7:
 404:Src/tim.c     ****   {
 405:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspInit 0 */
ARM GAS  /tmp/ccrgs2MM.s 			page 13


 406:Src/tim.c     **** 
 407:Src/tim.c     ****   /* USER CODE END TIM12_MspInit 0 */
 408:Src/tim.c     ****     /* TIM12 clock enable */
 409:Src/tim.c     ****     __HAL_RCC_TIM12_CLK_ENABLE();
 277              		.loc 1 409 0
 278 000c 03F50833 		add	r3, r3, #139264
 279 0010 1A6C     		ldr	r2, [r3, #64]
 280 0012 42F04002 		orr	r2, r2, #64
 281 0016 1A64     		str	r2, [r3, #64]
 282 0018 1B6C     		ldr	r3, [r3, #64]
 283 001a 03F04003 		and	r3, r3, #64
 284 001e 0193     		str	r3, [sp, #4]
 285 0020 019B     		ldr	r3, [sp, #4]
 286              	.LBE7:
 410:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspInit 1 */
 411:Src/tim.c     **** 
 412:Src/tim.c     ****   /* USER CODE END TIM12_MspInit 1 */
 413:Src/tim.c     ****   }
 414:Src/tim.c     **** }
 287              		.loc 1 414 0
 288 0022 02B0     		add	sp, sp, #8
 289              	.LCFI8:
 290              		.cfi_def_cfa_offset 0
 291              		@ sp needed
 292 0024 7047     		bx	lr
 293              	.L32:
 294 0026 00BF     		.align	2
 295              	.L31:
 296 0028 00180040 		.word	1073747968
 297              		.cfi_endproc
 298              	.LFE145:
 300              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 301              		.align	1
 302              		.global	HAL_TIM_MspPostInit
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu fpv5-sp-d16
 308              	HAL_TIM_MspPostInit:
 309              	.LFB146:
 415:Src/tim.c     **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 416:Src/tim.c     **** {
 310              		.loc 1 416 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 24
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL8:
 315 0000 00B5     		push	{lr}
 316              	.LCFI9:
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 14, -4
 319 0002 87B0     		sub	sp, sp, #28
 320              	.LCFI10:
 321              		.cfi_def_cfa_offset 32
 417:Src/tim.c     **** 
 418:Src/tim.c     ****   GPIO_InitTypeDef GPIO_InitStruct;
 419:Src/tim.c     ****   if(timHandle->Instance==TIM1)
ARM GAS  /tmp/ccrgs2MM.s 			page 14


 322              		.loc 1 419 0
 323 0004 0368     		ldr	r3, [r0]
 324 0006 2C4A     		ldr	r2, .L45
 325 0008 9342     		cmp	r3, r2
 326 000a 0ED0     		beq	.L40
 420:Src/tim.c     ****   {
 421:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 422:Src/tim.c     **** 
 423:Src/tim.c     ****   /* USER CODE END TIM1_MspPostInit 0 */
 424:Src/tim.c     ****     /**TIM1 GPIO Configuration    
 425:Src/tim.c     ****     PA8     ------> TIM1_CH1 
 426:Src/tim.c     ****     */
 427:Src/tim.c     ****     GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 428:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 429:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 430:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 431:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 432:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 433:Src/tim.c     **** 
 434:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 435:Src/tim.c     **** 
 436:Src/tim.c     ****   /* USER CODE END TIM1_MspPostInit 1 */
 437:Src/tim.c     ****   }
 438:Src/tim.c     ****   else if(timHandle->Instance==TIM2)
 327              		.loc 1 438 0
 328 000c B3F1804F 		cmp	r3, #1073741824
 329 0010 1AD0     		beq	.L41
 439:Src/tim.c     ****   {
 440:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspPostInit 0 */
 441:Src/tim.c     **** 
 442:Src/tim.c     ****   /* USER CODE END TIM2_MspPostInit 0 */
 443:Src/tim.c     ****   
 444:Src/tim.c     ****     /**TIM2 GPIO Configuration    
 445:Src/tim.c     ****     PA15     ------> TIM2_CH1 
 446:Src/tim.c     ****     */
 447:Src/tim.c     ****     GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 448:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 449:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 450:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 451:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 452:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 453:Src/tim.c     **** 
 454:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspPostInit 1 */
 455:Src/tim.c     **** 
 456:Src/tim.c     ****   /* USER CODE END TIM2_MspPostInit 1 */
 457:Src/tim.c     ****   }
 458:Src/tim.c     ****   else if(timHandle->Instance==TIM3)
 330              		.loc 1 458 0
 331 0012 2A4A     		ldr	r2, .L45+4
 332 0014 9342     		cmp	r3, r2
 333 0016 26D0     		beq	.L42
 459:Src/tim.c     ****   {
 460:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspPostInit 0 */
 461:Src/tim.c     **** 
 462:Src/tim.c     ****   /* USER CODE END TIM3_MspPostInit 0 */
 463:Src/tim.c     ****   
 464:Src/tim.c     ****     /**TIM3 GPIO Configuration    
ARM GAS  /tmp/ccrgs2MM.s 			page 15


 465:Src/tim.c     ****     PB4     ------> TIM3_CH1 
 466:Src/tim.c     ****     */
 467:Src/tim.c     ****     GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 468:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 469:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 470:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 471:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 472:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 473:Src/tim.c     **** 
 474:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspPostInit 1 */
 475:Src/tim.c     **** 
 476:Src/tim.c     ****   /* USER CODE END TIM3_MspPostInit 1 */
 477:Src/tim.c     ****   }
 478:Src/tim.c     ****   else if(timHandle->Instance==TIM5)
 334              		.loc 1 478 0
 335 0018 294A     		ldr	r2, .L45+8
 336 001a 9342     		cmp	r3, r2
 337 001c 30D0     		beq	.L43
 479:Src/tim.c     ****   {
 480:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspPostInit 0 */
 481:Src/tim.c     **** 
 482:Src/tim.c     ****   /* USER CODE END TIM5_MspPostInit 0 */
 483:Src/tim.c     ****   
 484:Src/tim.c     ****     /**TIM5 GPIO Configuration    
 485:Src/tim.c     ****     PI0     ------> TIM5_CH4 
 486:Src/tim.c     ****     */
 487:Src/tim.c     ****     GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 488:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 489:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 490:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 491:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 492:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 493:Src/tim.c     **** 
 494:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspPostInit 1 */
 495:Src/tim.c     **** 
 496:Src/tim.c     ****   /* USER CODE END TIM5_MspPostInit 1 */
 497:Src/tim.c     ****   }
 498:Src/tim.c     ****   else if(timHandle->Instance==TIM12)
 338              		.loc 1 498 0
 339 001e 294A     		ldr	r2, .L45+12
 340 0020 9342     		cmp	r3, r2
 341 0022 3AD0     		beq	.L44
 342              	.LVL9:
 343              	.L33:
 499:Src/tim.c     ****   {
 500:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspPostInit 0 */
 501:Src/tim.c     **** 
 502:Src/tim.c     ****   /* USER CODE END TIM12_MspPostInit 0 */
 503:Src/tim.c     ****   
 504:Src/tim.c     ****     /**TIM12 GPIO Configuration    
 505:Src/tim.c     ****     PH6     ------> TIM12_CH1 
 506:Src/tim.c     ****     */
 507:Src/tim.c     ****     GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 508:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 509:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 510:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 511:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
ARM GAS  /tmp/ccrgs2MM.s 			page 16


 512:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 513:Src/tim.c     **** 
 514:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspPostInit 1 */
 515:Src/tim.c     **** 
 516:Src/tim.c     ****   /* USER CODE END TIM12_MspPostInit 1 */
 517:Src/tim.c     ****   }
 518:Src/tim.c     **** 
 519:Src/tim.c     **** }
 344              		.loc 1 519 0
 345 0024 07B0     		add	sp, sp, #28
 346              	.LCFI11:
 347              		.cfi_remember_state
 348              		.cfi_def_cfa_offset 4
 349              		@ sp needed
 350 0026 5DF804FB 		ldr	pc, [sp], #4
 351              	.LVL10:
 352              	.L40:
 353              	.LCFI12:
 354              		.cfi_restore_state
 427:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 355              		.loc 1 427 0
 356 002a 4FF48073 		mov	r3, #256
 357 002e 0193     		str	r3, [sp, #4]
 428:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 358              		.loc 1 428 0
 359 0030 0223     		movs	r3, #2
 360 0032 0293     		str	r3, [sp, #8]
 429:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 361              		.loc 1 429 0
 362 0034 0023     		movs	r3, #0
 363 0036 0393     		str	r3, [sp, #12]
 430:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 364              		.loc 1 430 0
 365 0038 0493     		str	r3, [sp, #16]
 431:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 366              		.loc 1 431 0
 367 003a 0123     		movs	r3, #1
 368 003c 0593     		str	r3, [sp, #20]
 432:Src/tim.c     **** 
 369              		.loc 1 432 0
 370 003e 01A9     		add	r1, sp, #4
 371 0040 2148     		ldr	r0, .L45+16
 372              	.LVL11:
 373 0042 FFF7FEFF 		bl	HAL_GPIO_Init
 374              	.LVL12:
 375 0046 EDE7     		b	.L33
 376              	.LVL13:
 377              	.L41:
 447:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 378              		.loc 1 447 0
 379 0048 4FF40043 		mov	r3, #32768
 380 004c 0193     		str	r3, [sp, #4]
 448:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 381              		.loc 1 448 0
 382 004e 0223     		movs	r3, #2
 383 0050 0293     		str	r3, [sp, #8]
 449:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccrgs2MM.s 			page 17


 384              		.loc 1 449 0
 385 0052 0023     		movs	r3, #0
 386 0054 0393     		str	r3, [sp, #12]
 450:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 387              		.loc 1 450 0
 388 0056 0493     		str	r3, [sp, #16]
 451:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 389              		.loc 1 451 0
 390 0058 0123     		movs	r3, #1
 391 005a 0593     		str	r3, [sp, #20]
 452:Src/tim.c     **** 
 392              		.loc 1 452 0
 393 005c 01A9     		add	r1, sp, #4
 394 005e 1A48     		ldr	r0, .L45+16
 395              	.LVL14:
 396 0060 FFF7FEFF 		bl	HAL_GPIO_Init
 397              	.LVL15:
 398 0064 DEE7     		b	.L33
 399              	.LVL16:
 400              	.L42:
 467:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 401              		.loc 1 467 0
 402 0066 1023     		movs	r3, #16
 403 0068 0193     		str	r3, [sp, #4]
 468:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 404              		.loc 1 468 0
 405 006a 0223     		movs	r3, #2
 406 006c 0293     		str	r3, [sp, #8]
 469:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 407              		.loc 1 469 0
 408 006e 0022     		movs	r2, #0
 409 0070 0392     		str	r2, [sp, #12]
 470:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 410              		.loc 1 470 0
 411 0072 0492     		str	r2, [sp, #16]
 471:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 412              		.loc 1 471 0
 413 0074 0593     		str	r3, [sp, #20]
 472:Src/tim.c     **** 
 414              		.loc 1 472 0
 415 0076 01A9     		add	r1, sp, #4
 416 0078 1448     		ldr	r0, .L45+20
 417              	.LVL17:
 418 007a FFF7FEFF 		bl	HAL_GPIO_Init
 419              	.LVL18:
 420 007e D1E7     		b	.L33
 421              	.LVL19:
 422              	.L43:
 487:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 423              		.loc 1 487 0
 424 0080 0123     		movs	r3, #1
 425 0082 0193     		str	r3, [sp, #4]
 488:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 426              		.loc 1 488 0
 427 0084 0223     		movs	r3, #2
 428 0086 0293     		str	r3, [sp, #8]
 489:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccrgs2MM.s 			page 18


 429              		.loc 1 489 0
 430 0088 0022     		movs	r2, #0
 431 008a 0392     		str	r2, [sp, #12]
 490:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 432              		.loc 1 490 0
 433 008c 0492     		str	r2, [sp, #16]
 491:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 434              		.loc 1 491 0
 435 008e 0593     		str	r3, [sp, #20]
 492:Src/tim.c     **** 
 436              		.loc 1 492 0
 437 0090 01A9     		add	r1, sp, #4
 438 0092 0F48     		ldr	r0, .L45+24
 439              	.LVL20:
 440 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 441              	.LVL21:
 442 0098 C4E7     		b	.L33
 443              	.LVL22:
 444              	.L44:
 507:Src/tim.c     ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 445              		.loc 1 507 0
 446 009a 4023     		movs	r3, #64
 447 009c 0193     		str	r3, [sp, #4]
 508:Src/tim.c     ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 448              		.loc 1 508 0
 449 009e 0223     		movs	r3, #2
 450 00a0 0293     		str	r3, [sp, #8]
 509:Src/tim.c     ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 451              		.loc 1 509 0
 452 00a2 0023     		movs	r3, #0
 453 00a4 0393     		str	r3, [sp, #12]
 510:Src/tim.c     ****     GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 454              		.loc 1 510 0
 455 00a6 0493     		str	r3, [sp, #16]
 511:Src/tim.c     ****     HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 456              		.loc 1 511 0
 457 00a8 0923     		movs	r3, #9
 458 00aa 0593     		str	r3, [sp, #20]
 512:Src/tim.c     **** 
 459              		.loc 1 512 0
 460 00ac 01A9     		add	r1, sp, #4
 461 00ae 0948     		ldr	r0, .L45+28
 462              	.LVL23:
 463 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 464              	.LVL24:
 465              		.loc 1 519 0
 466 00b4 B6E7     		b	.L33
 467              	.L46:
 468 00b6 00BF     		.align	2
 469              	.L45:
 470 00b8 00000140 		.word	1073807360
 471 00bc 00040040 		.word	1073742848
 472 00c0 000C0040 		.word	1073744896
 473 00c4 00180040 		.word	1073747968
 474 00c8 00000240 		.word	1073872896
 475 00cc 00040240 		.word	1073873920
 476 00d0 00200240 		.word	1073881088
ARM GAS  /tmp/ccrgs2MM.s 			page 19


 477 00d4 001C0240 		.word	1073880064
 478              		.cfi_endproc
 479              	.LFE146:
 481              		.section	.text.MX_TIM1_Init,"ax",%progbits
 482              		.align	1
 483              		.global	MX_TIM1_Init
 484              		.syntax unified
 485              		.thumb
 486              		.thumb_func
 487              		.fpu fpv5-sp-d16
 489              	MX_TIM1_Init:
 490              	.LFB138:
  66:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 491              		.loc 1 66 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 104
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495 0000 00B5     		push	{lr}
 496              	.LCFI13:
 497              		.cfi_def_cfa_offset 4
 498              		.cfi_offset 14, -4
 499 0002 9BB0     		sub	sp, sp, #108
 500              	.LCFI14:
 501              		.cfi_def_cfa_offset 112
  72:Src/tim.c     ****   htim1.Init.Prescaler = 0;
 502              		.loc 1 72 0
 503 0004 3748     		ldr	r0, .L61
 504 0006 384B     		ldr	r3, .L61+4
 505 0008 0360     		str	r3, [r0]
  73:Src/tim.c     ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 506              		.loc 1 73 0
 507 000a 0023     		movs	r3, #0
 508 000c 4360     		str	r3, [r0, #4]
  74:Src/tim.c     ****   htim1.Init.Period = 0;
 509              		.loc 1 74 0
 510 000e 8360     		str	r3, [r0, #8]
  75:Src/tim.c     ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 511              		.loc 1 75 0
 512 0010 C360     		str	r3, [r0, #12]
  76:Src/tim.c     ****   htim1.Init.RepetitionCounter = 0;
 513              		.loc 1 76 0
 514 0012 0361     		str	r3, [r0, #16]
  77:Src/tim.c     ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 515              		.loc 1 77 0
 516 0014 4361     		str	r3, [r0, #20]
  78:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 517              		.loc 1 78 0
 518 0016 8361     		str	r3, [r0, #24]
  79:Src/tim.c     ****   {
 519              		.loc 1 79 0
 520 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 521              	.LVL25:
 522 001c 0028     		cmp	r0, #0
 523 001e 42D1     		bne	.L55
 524              	.L48:
  84:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 525              		.loc 1 84 0
ARM GAS  /tmp/ccrgs2MM.s 			page 20


 526 0020 1AA9     		add	r1, sp, #104
 527 0022 4FF48053 		mov	r3, #4096
 528 0026 41F8103D 		str	r3, [r1, #-16]!
  85:Src/tim.c     ****   {
 529              		.loc 1 85 0
 530 002a 2E48     		ldr	r0, .L61
 531 002c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 532              	.LVL26:
 533 0030 0028     		cmp	r0, #0
 534 0032 3DD1     		bne	.L56
 535              	.L49:
  90:Src/tim.c     ****   {
 536              		.loc 1 90 0
 537 0034 2B48     		ldr	r0, .L61
 538 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 539              	.LVL27:
 540 003a 0028     		cmp	r0, #0
 541 003c 3DD1     		bne	.L57
 542              	.L50:
  95:Src/tim.c     ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 543              		.loc 1 95 0
 544 003e 0023     		movs	r3, #0
 545 0040 1393     		str	r3, [sp, #76]
  96:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 546              		.loc 1 96 0
 547 0042 1493     		str	r3, [sp, #80]
  97:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 548              		.loc 1 97 0
 549 0044 1593     		str	r3, [sp, #84]
  98:Src/tim.c     ****   {
 550              		.loc 1 98 0
 551 0046 13A9     		add	r1, sp, #76
 552 0048 2648     		ldr	r0, .L61
 553 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 554              	.LVL28:
 555 004e 0028     		cmp	r0, #0
 556 0050 38D1     		bne	.L58
 557              	.L51:
 103:Src/tim.c     ****   sConfigOC.Pulse = 0;
 558              		.loc 1 103 0
 559 0052 6023     		movs	r3, #96
 560 0054 0C93     		str	r3, [sp, #48]
 104:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 561              		.loc 1 104 0
 562 0056 0022     		movs	r2, #0
 563 0058 0D92     		str	r2, [sp, #52]
 105:Src/tim.c     ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 564              		.loc 1 105 0
 565 005a 0E92     		str	r2, [sp, #56]
 106:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 566              		.loc 1 106 0
 567 005c 0F92     		str	r2, [sp, #60]
 107:Src/tim.c     ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 568              		.loc 1 107 0
 569 005e 1092     		str	r2, [sp, #64]
 108:Src/tim.c     ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 570              		.loc 1 108 0
ARM GAS  /tmp/ccrgs2MM.s 			page 21


 571 0060 1192     		str	r2, [sp, #68]
 109:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 572              		.loc 1 109 0
 573 0062 1292     		str	r2, [sp, #72]
 110:Src/tim.c     ****   {
 574              		.loc 1 110 0
 575 0064 0CA9     		add	r1, sp, #48
 576 0066 1F48     		ldr	r0, .L61
 577 0068 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 578              	.LVL29:
 579 006c 0028     		cmp	r0, #0
 580 006e 2ED1     		bne	.L59
 581              	.L52:
 115:Src/tim.c     ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 582              		.loc 1 115 0
 583 0070 0023     		movs	r3, #0
 584 0072 0193     		str	r3, [sp, #4]
 116:Src/tim.c     ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 585              		.loc 1 116 0
 586 0074 0293     		str	r3, [sp, #8]
 117:Src/tim.c     ****   sBreakDeadTimeConfig.DeadTime = 0;
 587              		.loc 1 117 0
 588 0076 0393     		str	r3, [sp, #12]
 118:Src/tim.c     ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 589              		.loc 1 118 0
 590 0078 0493     		str	r3, [sp, #16]
 119:Src/tim.c     ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 591              		.loc 1 119 0
 592 007a 0593     		str	r3, [sp, #20]
 120:Src/tim.c     ****   sBreakDeadTimeConfig.BreakFilter = 0;
 593              		.loc 1 120 0
 594 007c 4FF40052 		mov	r2, #8192
 595 0080 0692     		str	r2, [sp, #24]
 121:Src/tim.c     ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 596              		.loc 1 121 0
 597 0082 0793     		str	r3, [sp, #28]
 122:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 598              		.loc 1 122 0
 599 0084 0893     		str	r3, [sp, #32]
 123:Src/tim.c     ****   sBreakDeadTimeConfig.Break2Filter = 0;
 600              		.loc 1 123 0
 601 0086 4FF00072 		mov	r2, #33554432
 602 008a 0992     		str	r2, [sp, #36]
 124:Src/tim.c     ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 603              		.loc 1 124 0
 604 008c 0A93     		str	r3, [sp, #40]
 125:Src/tim.c     ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 605              		.loc 1 125 0
 606 008e 0B93     		str	r3, [sp, #44]
 126:Src/tim.c     ****   {
 607              		.loc 1 126 0
 608 0090 01A9     		add	r1, sp, #4
 609 0092 1448     		ldr	r0, .L61
 610 0094 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 611              	.LVL30:
 612 0098 F0B9     		cbnz	r0, .L60
 613              	.L53:
ARM GAS  /tmp/ccrgs2MM.s 			page 22


 131:Src/tim.c     **** 
 614              		.loc 1 131 0
 615 009a 1248     		ldr	r0, .L61
 616 009c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 617              	.LVL31:
 133:Src/tim.c     **** /* TIM2 init function */
 618              		.loc 1 133 0
 619 00a0 1BB0     		add	sp, sp, #108
 620              	.LCFI15:
 621              		.cfi_remember_state
 622              		.cfi_def_cfa_offset 4
 623              		@ sp needed
 624 00a2 5DF804FB 		ldr	pc, [sp], #4
 625              	.L55:
 626              	.LCFI16:
 627              		.cfi_restore_state
  81:Src/tim.c     ****   }
 628              		.loc 1 81 0
 629 00a6 5121     		movs	r1, #81
 630 00a8 1048     		ldr	r0, .L61+8
 631 00aa FFF7FEFF 		bl	_Error_Handler
 632              	.LVL32:
 633 00ae B7E7     		b	.L48
 634              	.L56:
  87:Src/tim.c     ****   }
 635              		.loc 1 87 0
 636 00b0 5721     		movs	r1, #87
 637 00b2 0E48     		ldr	r0, .L61+8
 638 00b4 FFF7FEFF 		bl	_Error_Handler
 639              	.LVL33:
 640 00b8 BCE7     		b	.L49
 641              	.L57:
  92:Src/tim.c     ****   }
 642              		.loc 1 92 0
 643 00ba 5C21     		movs	r1, #92
 644 00bc 0B48     		ldr	r0, .L61+8
 645 00be FFF7FEFF 		bl	_Error_Handler
 646              	.LVL34:
 647 00c2 BCE7     		b	.L50
 648              	.L58:
 100:Src/tim.c     ****   }
 649              		.loc 1 100 0
 650 00c4 6421     		movs	r1, #100
 651 00c6 0948     		ldr	r0, .L61+8
 652 00c8 FFF7FEFF 		bl	_Error_Handler
 653              	.LVL35:
 654 00cc C1E7     		b	.L51
 655              	.L59:
 112:Src/tim.c     ****   }
 656              		.loc 1 112 0
 657 00ce 7021     		movs	r1, #112
 658 00d0 0648     		ldr	r0, .L61+8
 659 00d2 FFF7FEFF 		bl	_Error_Handler
 660              	.LVL36:
 661 00d6 CBE7     		b	.L52
 662              	.L60:
 128:Src/tim.c     ****   }
ARM GAS  /tmp/ccrgs2MM.s 			page 23


 663              		.loc 1 128 0
 664 00d8 8021     		movs	r1, #128
 665 00da 0448     		ldr	r0, .L61+8
 666 00dc FFF7FEFF 		bl	_Error_Handler
 667              	.LVL37:
 668 00e0 DBE7     		b	.L53
 669              	.L62:
 670 00e2 00BF     		.align	2
 671              	.L61:
 672 00e4 00000000 		.word	htim1
 673 00e8 00000140 		.word	1073807360
 674 00ec 00000000 		.word	.LC0
 675              		.cfi_endproc
 676              	.LFE138:
 678              		.section	.text.MX_TIM2_Init,"ax",%progbits
 679              		.align	1
 680              		.global	MX_TIM2_Init
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv5-sp-d16
 686              	MX_TIM2_Init:
 687              	.LFB139:
 136:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 688              		.loc 1 136 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 56
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692 0000 00B5     		push	{lr}
 693              	.LCFI17:
 694              		.cfi_def_cfa_offset 4
 695              		.cfi_offset 14, -4
 696 0002 8FB0     		sub	sp, sp, #60
 697              	.LCFI18:
 698              		.cfi_def_cfa_offset 64
 141:Src/tim.c     ****   htim2.Init.Prescaler = 0;
 699              		.loc 1 141 0
 700 0004 2548     		ldr	r0, .L75
 701 0006 4FF08043 		mov	r3, #1073741824
 702 000a 0360     		str	r3, [r0]
 142:Src/tim.c     ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 703              		.loc 1 142 0
 704 000c 0023     		movs	r3, #0
 705 000e 4360     		str	r3, [r0, #4]
 143:Src/tim.c     ****   htim2.Init.Period = 0;
 706              		.loc 1 143 0
 707 0010 8360     		str	r3, [r0, #8]
 144:Src/tim.c     ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 708              		.loc 1 144 0
 709 0012 C360     		str	r3, [r0, #12]
 145:Src/tim.c     ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 710              		.loc 1 145 0
 711 0014 0361     		str	r3, [r0, #16]
 146:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 712              		.loc 1 146 0
 713 0016 8361     		str	r3, [r0, #24]
 147:Src/tim.c     ****   {
ARM GAS  /tmp/ccrgs2MM.s 			page 24


 714              		.loc 1 147 0
 715 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 716              	.LVL38:
 717 001c 28BB     		cbnz	r0, .L70
 718              	.L64:
 152:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 719              		.loc 1 152 0
 720 001e 0EA9     		add	r1, sp, #56
 721 0020 4FF48053 		mov	r3, #4096
 722 0024 41F8103D 		str	r3, [r1, #-16]!
 153:Src/tim.c     ****   {
 723              		.loc 1 153 0
 724 0028 1C48     		ldr	r0, .L75
 725 002a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 726              	.LVL39:
 727 002e 08BB     		cbnz	r0, .L71
 728              	.L65:
 158:Src/tim.c     ****   {
 729              		.loc 1 158 0
 730 0030 1A48     		ldr	r0, .L75
 731 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 732              	.LVL40:
 733 0036 10BB     		cbnz	r0, .L72
 734              	.L66:
 163:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 735              		.loc 1 163 0
 736 0038 0023     		movs	r3, #0
 737 003a 0793     		str	r3, [sp, #28]
 164:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 738              		.loc 1 164 0
 739 003c 0993     		str	r3, [sp, #36]
 165:Src/tim.c     ****   {
 740              		.loc 1 165 0
 741 003e 07A9     		add	r1, sp, #28
 742 0040 1648     		ldr	r0, .L75
 743 0042 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 744              	.LVL41:
 745 0046 F8B9     		cbnz	r0, .L73
 746              	.L67:
 170:Src/tim.c     ****   sConfigOC.Pulse = 0;
 747              		.loc 1 170 0
 748 0048 6023     		movs	r3, #96
 749 004a 0093     		str	r3, [sp]
 171:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 750              		.loc 1 171 0
 751 004c 0022     		movs	r2, #0
 752 004e 0192     		str	r2, [sp, #4]
 172:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 753              		.loc 1 172 0
 754 0050 0292     		str	r2, [sp, #8]
 173:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 755              		.loc 1 173 0
 756 0052 0492     		str	r2, [sp, #16]
 174:Src/tim.c     ****   {
 757              		.loc 1 174 0
 758 0054 6946     		mov	r1, sp
 759 0056 1148     		ldr	r0, .L75
ARM GAS  /tmp/ccrgs2MM.s 			page 25


 760 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 761              	.LVL42:
 762 005c C8B9     		cbnz	r0, .L74
 763              	.L68:
 179:Src/tim.c     **** 
 764              		.loc 1 179 0
 765 005e 0F48     		ldr	r0, .L75
 766 0060 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 767              	.LVL43:
 181:Src/tim.c     **** /* TIM3 init function */
 768              		.loc 1 181 0
 769 0064 0FB0     		add	sp, sp, #60
 770              	.LCFI19:
 771              		.cfi_remember_state
 772              		.cfi_def_cfa_offset 4
 773              		@ sp needed
 774 0066 5DF804FB 		ldr	pc, [sp], #4
 775              	.L70:
 776              	.LCFI20:
 777              		.cfi_restore_state
 149:Src/tim.c     ****   }
 778              		.loc 1 149 0
 779 006a 9521     		movs	r1, #149
 780 006c 0C48     		ldr	r0, .L75+4
 781 006e FFF7FEFF 		bl	_Error_Handler
 782              	.LVL44:
 783 0072 D4E7     		b	.L64
 784              	.L71:
 155:Src/tim.c     ****   }
 785              		.loc 1 155 0
 786 0074 9B21     		movs	r1, #155
 787 0076 0A48     		ldr	r0, .L75+4
 788 0078 FFF7FEFF 		bl	_Error_Handler
 789              	.LVL45:
 790 007c D8E7     		b	.L65
 791              	.L72:
 160:Src/tim.c     ****   }
 792              		.loc 1 160 0
 793 007e A021     		movs	r1, #160
 794 0080 0748     		ldr	r0, .L75+4
 795 0082 FFF7FEFF 		bl	_Error_Handler
 796              	.LVL46:
 797 0086 D7E7     		b	.L66
 798              	.L73:
 167:Src/tim.c     ****   }
 799              		.loc 1 167 0
 800 0088 A721     		movs	r1, #167
 801 008a 0548     		ldr	r0, .L75+4
 802 008c FFF7FEFF 		bl	_Error_Handler
 803              	.LVL47:
 804 0090 DAE7     		b	.L67
 805              	.L74:
 176:Src/tim.c     ****   }
 806              		.loc 1 176 0
 807 0092 B021     		movs	r1, #176
 808 0094 0248     		ldr	r0, .L75+4
 809 0096 FFF7FEFF 		bl	_Error_Handler
ARM GAS  /tmp/ccrgs2MM.s 			page 26


 810              	.LVL48:
 811 009a E0E7     		b	.L68
 812              	.L76:
 813              		.align	2
 814              	.L75:
 815 009c 00000000 		.word	htim2
 816 00a0 00000000 		.word	.LC0
 817              		.cfi_endproc
 818              	.LFE139:
 820              		.section	.text.MX_TIM3_Init,"ax",%progbits
 821              		.align	1
 822              		.global	MX_TIM3_Init
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 826              		.fpu fpv5-sp-d16
 828              	MX_TIM3_Init:
 829              	.LFB140:
 184:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 830              		.loc 1 184 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 56
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834 0000 00B5     		push	{lr}
 835              	.LCFI21:
 836              		.cfi_def_cfa_offset 4
 837              		.cfi_offset 14, -4
 838 0002 8FB0     		sub	sp, sp, #60
 839              	.LCFI22:
 840              		.cfi_def_cfa_offset 64
 189:Src/tim.c     ****   htim3.Init.Prescaler = 0;
 841              		.loc 1 189 0
 842 0004 2548     		ldr	r0, .L89
 843 0006 264B     		ldr	r3, .L89+4
 844 0008 0360     		str	r3, [r0]
 190:Src/tim.c     ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 845              		.loc 1 190 0
 846 000a 0023     		movs	r3, #0
 847 000c 4360     		str	r3, [r0, #4]
 191:Src/tim.c     ****   htim3.Init.Period = 0;
 848              		.loc 1 191 0
 849 000e 8360     		str	r3, [r0, #8]
 192:Src/tim.c     ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 850              		.loc 1 192 0
 851 0010 C360     		str	r3, [r0, #12]
 193:Src/tim.c     ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 852              		.loc 1 193 0
 853 0012 0361     		str	r3, [r0, #16]
 194:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 854              		.loc 1 194 0
 855 0014 8361     		str	r3, [r0, #24]
 195:Src/tim.c     ****   {
 856              		.loc 1 195 0
 857 0016 FFF7FEFF 		bl	HAL_TIM_Base_Init
 858              	.LVL49:
 859 001a 28BB     		cbnz	r0, .L84
 860              	.L78:
ARM GAS  /tmp/ccrgs2MM.s 			page 27


 200:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 861              		.loc 1 200 0
 862 001c 0EA9     		add	r1, sp, #56
 863 001e 4FF48053 		mov	r3, #4096
 864 0022 41F8103D 		str	r3, [r1, #-16]!
 201:Src/tim.c     ****   {
 865              		.loc 1 201 0
 866 0026 1D48     		ldr	r0, .L89
 867 0028 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 868              	.LVL50:
 869 002c 08BB     		cbnz	r0, .L85
 870              	.L79:
 206:Src/tim.c     ****   {
 871              		.loc 1 206 0
 872 002e 1B48     		ldr	r0, .L89
 873 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 874              	.LVL51:
 875 0034 10BB     		cbnz	r0, .L86
 876              	.L80:
 211:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 877              		.loc 1 211 0
 878 0036 0023     		movs	r3, #0
 879 0038 0793     		str	r3, [sp, #28]
 212:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 880              		.loc 1 212 0
 881 003a 0993     		str	r3, [sp, #36]
 213:Src/tim.c     ****   {
 882              		.loc 1 213 0
 883 003c 07A9     		add	r1, sp, #28
 884 003e 1748     		ldr	r0, .L89
 885 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 886              	.LVL52:
 887 0044 F8B9     		cbnz	r0, .L87
 888              	.L81:
 218:Src/tim.c     ****   sConfigOC.Pulse = 0;
 889              		.loc 1 218 0
 890 0046 6023     		movs	r3, #96
 891 0048 0093     		str	r3, [sp]
 219:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 892              		.loc 1 219 0
 893 004a 0022     		movs	r2, #0
 894 004c 0192     		str	r2, [sp, #4]
 220:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 895              		.loc 1 220 0
 896 004e 0292     		str	r2, [sp, #8]
 221:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 897              		.loc 1 221 0
 898 0050 0492     		str	r2, [sp, #16]
 222:Src/tim.c     ****   {
 899              		.loc 1 222 0
 900 0052 6946     		mov	r1, sp
 901 0054 1148     		ldr	r0, .L89
 902 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 903              	.LVL53:
 904 005a C8B9     		cbnz	r0, .L88
 905              	.L82:
 227:Src/tim.c     **** 
ARM GAS  /tmp/ccrgs2MM.s 			page 28


 906              		.loc 1 227 0
 907 005c 0F48     		ldr	r0, .L89
 908 005e FFF7FEFF 		bl	HAL_TIM_MspPostInit
 909              	.LVL54:
 229:Src/tim.c     **** /* TIM5 init function */
 910              		.loc 1 229 0
 911 0062 0FB0     		add	sp, sp, #60
 912              	.LCFI23:
 913              		.cfi_remember_state
 914              		.cfi_def_cfa_offset 4
 915              		@ sp needed
 916 0064 5DF804FB 		ldr	pc, [sp], #4
 917              	.L84:
 918              	.LCFI24:
 919              		.cfi_restore_state
 197:Src/tim.c     ****   }
 920              		.loc 1 197 0
 921 0068 C521     		movs	r1, #197
 922 006a 0E48     		ldr	r0, .L89+8
 923 006c FFF7FEFF 		bl	_Error_Handler
 924              	.LVL55:
 925 0070 D4E7     		b	.L78
 926              	.L85:
 203:Src/tim.c     ****   }
 927              		.loc 1 203 0
 928 0072 CB21     		movs	r1, #203
 929 0074 0B48     		ldr	r0, .L89+8
 930 0076 FFF7FEFF 		bl	_Error_Handler
 931              	.LVL56:
 932 007a D8E7     		b	.L79
 933              	.L86:
 208:Src/tim.c     ****   }
 934              		.loc 1 208 0
 935 007c D021     		movs	r1, #208
 936 007e 0948     		ldr	r0, .L89+8
 937 0080 FFF7FEFF 		bl	_Error_Handler
 938              	.LVL57:
 939 0084 D7E7     		b	.L80
 940              	.L87:
 215:Src/tim.c     ****   }
 941              		.loc 1 215 0
 942 0086 D721     		movs	r1, #215
 943 0088 0648     		ldr	r0, .L89+8
 944 008a FFF7FEFF 		bl	_Error_Handler
 945              	.LVL58:
 946 008e DAE7     		b	.L81
 947              	.L88:
 224:Src/tim.c     ****   }
 948              		.loc 1 224 0
 949 0090 E021     		movs	r1, #224
 950 0092 0448     		ldr	r0, .L89+8
 951 0094 FFF7FEFF 		bl	_Error_Handler
 952              	.LVL59:
 953 0098 E0E7     		b	.L82
 954              	.L90:
 955 009a 00BF     		.align	2
 956              	.L89:
ARM GAS  /tmp/ccrgs2MM.s 			page 29


 957 009c 00000000 		.word	htim3
 958 00a0 00040040 		.word	1073742848
 959 00a4 00000000 		.word	.LC0
 960              		.cfi_endproc
 961              	.LFE140:
 963              		.section	.text.MX_TIM5_Init,"ax",%progbits
 964              		.align	1
 965              		.global	MX_TIM5_Init
 966              		.syntax unified
 967              		.thumb
 968              		.thumb_func
 969              		.fpu fpv5-sp-d16
 971              	MX_TIM5_Init:
 972              	.LFB141:
 232:Src/tim.c     ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 973              		.loc 1 232 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 56
 976              		@ frame_needed = 0, uses_anonymous_args = 0
 977 0000 00B5     		push	{lr}
 978              	.LCFI25:
 979              		.cfi_def_cfa_offset 4
 980              		.cfi_offset 14, -4
 981 0002 8FB0     		sub	sp, sp, #60
 982              	.LCFI26:
 983              		.cfi_def_cfa_offset 64
 237:Src/tim.c     ****   htim5.Init.Prescaler = 0;
 984              		.loc 1 237 0
 985 0004 2748     		ldr	r0, .L103
 986 0006 284B     		ldr	r3, .L103+4
 987 0008 0360     		str	r3, [r0]
 238:Src/tim.c     ****   htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 988              		.loc 1 238 0
 989 000a 0023     		movs	r3, #0
 990 000c 4360     		str	r3, [r0, #4]
 239:Src/tim.c     ****   htim5.Init.Period = 0;
 991              		.loc 1 239 0
 992 000e 8360     		str	r3, [r0, #8]
 240:Src/tim.c     ****   htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 993              		.loc 1 240 0
 994 0010 C360     		str	r3, [r0, #12]
 241:Src/tim.c     ****   htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 995              		.loc 1 241 0
 996 0012 0361     		str	r3, [r0, #16]
 242:Src/tim.c     ****   if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 997              		.loc 1 242 0
 998 0014 8361     		str	r3, [r0, #24]
 243:Src/tim.c     ****   {
 999              		.loc 1 243 0
 1000 0016 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1001              	.LVL60:
 1002 001a 30BB     		cbnz	r0, .L98
 1003              	.L92:
 248:Src/tim.c     ****   if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 1004              		.loc 1 248 0
 1005 001c 0EA9     		add	r1, sp, #56
 1006 001e 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/ccrgs2MM.s 			page 30


 1007 0022 41F8103D 		str	r3, [r1, #-16]!
 249:Src/tim.c     ****   {
 1008              		.loc 1 249 0
 1009 0026 1F48     		ldr	r0, .L103
 1010 0028 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1011              	.LVL61:
 1012 002c 10BB     		cbnz	r0, .L99
 1013              	.L93:
 254:Src/tim.c     ****   {
 1014              		.loc 1 254 0
 1015 002e 1D48     		ldr	r0, .L103
 1016 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1017              	.LVL62:
 1018 0034 18BB     		cbnz	r0, .L100
 1019              	.L94:
 259:Src/tim.c     ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1020              		.loc 1 259 0
 1021 0036 0023     		movs	r3, #0
 1022 0038 0793     		str	r3, [sp, #28]
 260:Src/tim.c     ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 1023              		.loc 1 260 0
 1024 003a 0993     		str	r3, [sp, #36]
 261:Src/tim.c     ****   {
 1025              		.loc 1 261 0
 1026 003c 07A9     		add	r1, sp, #28
 1027 003e 1948     		ldr	r0, .L103
 1028 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1029              	.LVL63:
 1030 0044 08BB     		cbnz	r0, .L101
 1031              	.L95:
 266:Src/tim.c     ****   sConfigOC.Pulse = 0;
 1032              		.loc 1 266 0
 1033 0046 6023     		movs	r3, #96
 1034 0048 0093     		str	r3, [sp]
 267:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1035              		.loc 1 267 0
 1036 004a 0023     		movs	r3, #0
 1037 004c 0193     		str	r3, [sp, #4]
 268:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1038              		.loc 1 268 0
 1039 004e 0293     		str	r3, [sp, #8]
 269:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 1040              		.loc 1 269 0
 1041 0050 0493     		str	r3, [sp, #16]
 270:Src/tim.c     ****   {
 1042              		.loc 1 270 0
 1043 0052 0C22     		movs	r2, #12
 1044 0054 6946     		mov	r1, sp
 1045 0056 1348     		ldr	r0, .L103
 1046 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1047              	.LVL64:
 1048 005c D8B9     		cbnz	r0, .L102
 1049              	.L96:
 275:Src/tim.c     **** 
 1050              		.loc 1 275 0
 1051 005e 1148     		ldr	r0, .L103
 1052 0060 FFF7FEFF 		bl	HAL_TIM_MspPostInit
ARM GAS  /tmp/ccrgs2MM.s 			page 31


 1053              	.LVL65:
 277:Src/tim.c     **** /* TIM8 init function */
 1054              		.loc 1 277 0
 1055 0064 0FB0     		add	sp, sp, #60
 1056              	.LCFI27:
 1057              		.cfi_remember_state
 1058              		.cfi_def_cfa_offset 4
 1059              		@ sp needed
 1060 0066 5DF804FB 		ldr	pc, [sp], #4
 1061              	.L98:
 1062              	.LCFI28:
 1063              		.cfi_restore_state
 245:Src/tim.c     ****   }
 1064              		.loc 1 245 0
 1065 006a F521     		movs	r1, #245
 1066 006c 0F48     		ldr	r0, .L103+8
 1067 006e FFF7FEFF 		bl	_Error_Handler
 1068              	.LVL66:
 1069 0072 D3E7     		b	.L92
 1070              	.L99:
 251:Src/tim.c     ****   }
 1071              		.loc 1 251 0
 1072 0074 FB21     		movs	r1, #251
 1073 0076 0D48     		ldr	r0, .L103+8
 1074 0078 FFF7FEFF 		bl	_Error_Handler
 1075              	.LVL67:
 1076 007c D7E7     		b	.L93
 1077              	.L100:
 256:Src/tim.c     ****   }
 1078              		.loc 1 256 0
 1079 007e 4FF48071 		mov	r1, #256
 1080 0082 0A48     		ldr	r0, .L103+8
 1081 0084 FFF7FEFF 		bl	_Error_Handler
 1082              	.LVL68:
 1083 0088 D5E7     		b	.L94
 1084              	.L101:
 263:Src/tim.c     ****   }
 1085              		.loc 1 263 0
 1086 008a 40F20711 		movw	r1, #263
 1087 008e 0748     		ldr	r0, .L103+8
 1088 0090 FFF7FEFF 		bl	_Error_Handler
 1089              	.LVL69:
 1090 0094 D7E7     		b	.L95
 1091              	.L102:
 272:Src/tim.c     ****   }
 1092              		.loc 1 272 0
 1093 0096 4FF48871 		mov	r1, #272
 1094 009a 0448     		ldr	r0, .L103+8
 1095 009c FFF7FEFF 		bl	_Error_Handler
 1096              	.LVL70:
 1097 00a0 DDE7     		b	.L96
 1098              	.L104:
 1099 00a2 00BF     		.align	2
 1100              	.L103:
 1101 00a4 00000000 		.word	htim5
 1102 00a8 000C0040 		.word	1073744896
 1103 00ac 00000000 		.word	.LC0
ARM GAS  /tmp/ccrgs2MM.s 			page 32


 1104              		.cfi_endproc
 1105              	.LFE141:
 1107              		.section	.text.MX_TIM12_Init,"ax",%progbits
 1108              		.align	1
 1109              		.global	MX_TIM12_Init
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv5-sp-d16
 1115              	MX_TIM12_Init:
 1116              	.LFB143:
 313:Src/tim.c     ****   TIM_OC_InitTypeDef sConfigOC;
 1117              		.loc 1 313 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 32
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121 0000 00B5     		push	{lr}
 1122              	.LCFI29:
 1123              		.cfi_def_cfa_offset 4
 1124              		.cfi_offset 14, -4
 1125 0002 89B0     		sub	sp, sp, #36
 1126              	.LCFI30:
 1127              		.cfi_def_cfa_offset 40
 316:Src/tim.c     ****   htim12.Init.Prescaler = 0;
 1128              		.loc 1 316 0
 1129 0004 1448     		ldr	r0, .L111
 1130 0006 154B     		ldr	r3, .L111+4
 1131 0008 0360     		str	r3, [r0]
 317:Src/tim.c     ****   htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 1132              		.loc 1 317 0
 1133 000a 0023     		movs	r3, #0
 1134 000c 4360     		str	r3, [r0, #4]
 318:Src/tim.c     ****   htim12.Init.Period = 0;
 1135              		.loc 1 318 0
 1136 000e 8360     		str	r3, [r0, #8]
 319:Src/tim.c     ****   htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1137              		.loc 1 319 0
 1138 0010 C360     		str	r3, [r0, #12]
 320:Src/tim.c     ****   htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1139              		.loc 1 320 0
 1140 0012 0361     		str	r3, [r0, #16]
 321:Src/tim.c     ****   if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 1141              		.loc 1 321 0
 1142 0014 8361     		str	r3, [r0, #24]
 322:Src/tim.c     ****   {
 1143              		.loc 1 322 0
 1144 0016 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1145              	.LVL71:
 1146 001a 80B9     		cbnz	r0, .L109
 1147              	.L106:
 327:Src/tim.c     ****   sConfigOC.Pulse = 0;
 1148              		.loc 1 327 0
 1149 001c 6023     		movs	r3, #96
 1150 001e 0193     		str	r3, [sp, #4]
 328:Src/tim.c     ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1151              		.loc 1 328 0
 1152 0020 0022     		movs	r2, #0
ARM GAS  /tmp/ccrgs2MM.s 			page 33


 1153 0022 0292     		str	r2, [sp, #8]
 329:Src/tim.c     ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1154              		.loc 1 329 0
 1155 0024 0392     		str	r2, [sp, #12]
 330:Src/tim.c     ****   if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1156              		.loc 1 330 0
 1157 0026 0592     		str	r2, [sp, #20]
 331:Src/tim.c     ****   {
 1158              		.loc 1 331 0
 1159 0028 01A9     		add	r1, sp, #4
 1160 002a 0B48     		ldr	r0, .L111
 1161 002c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1162              	.LVL72:
 1163 0030 58B9     		cbnz	r0, .L110
 1164              	.L107:
 336:Src/tim.c     **** 
 1165              		.loc 1 336 0
 1166 0032 0948     		ldr	r0, .L111
 1167 0034 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1168              	.LVL73:
 338:Src/tim.c     **** 
 1169              		.loc 1 338 0
 1170 0038 09B0     		add	sp, sp, #36
 1171              	.LCFI31:
 1172              		.cfi_remember_state
 1173              		.cfi_def_cfa_offset 4
 1174              		@ sp needed
 1175 003a 5DF804FB 		ldr	pc, [sp], #4
 1176              	.L109:
 1177              	.LCFI32:
 1178              		.cfi_restore_state
 324:Src/tim.c     ****   }
 1179              		.loc 1 324 0
 1180 003e 4FF4A271 		mov	r1, #324
 1181 0042 0748     		ldr	r0, .L111+8
 1182 0044 FFF7FEFF 		bl	_Error_Handler
 1183              	.LVL74:
 1184 0048 E8E7     		b	.L106
 1185              	.L110:
 333:Src/tim.c     ****   }
 1186              		.loc 1 333 0
 1187 004a 40F24D11 		movw	r1, #333
 1188 004e 0448     		ldr	r0, .L111+8
 1189 0050 FFF7FEFF 		bl	_Error_Handler
 1190              	.LVL75:
 1191 0054 EDE7     		b	.L107
 1192              	.L112:
 1193 0056 00BF     		.align	2
 1194              	.L111:
 1195 0058 00000000 		.word	htim12
 1196 005c 00180040 		.word	1073747968
 1197 0060 00000000 		.word	.LC0
 1198              		.cfi_endproc
 1199              	.LFE143:
 1201              		.section	.text.HAL_TIM_Base_MspDeInit,"ax",%progbits
 1202              		.align	1
 1203              		.global	HAL_TIM_Base_MspDeInit
ARM GAS  /tmp/ccrgs2MM.s 			page 34


 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1207              		.fpu fpv5-sp-d16
 1209              	HAL_TIM_Base_MspDeInit:
 1210              	.LFB147:
 520:Src/tim.c     **** 
 521:Src/tim.c     **** void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
 522:Src/tim.c     **** {
 1211              		.loc 1 522 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 0
 1214              		@ frame_needed = 0, uses_anonymous_args = 0
 1215              		@ link register save eliminated.
 1216              	.LVL76:
 523:Src/tim.c     **** 
 524:Src/tim.c     ****   if(tim_baseHandle->Instance==TIM1)
 1217              		.loc 1 524 0
 1218 0000 0368     		ldr	r3, [r0]
 1219 0002 194A     		ldr	r2, .L124
 1220 0004 9342     		cmp	r3, r2
 1221 0006 0CD0     		beq	.L119
 525:Src/tim.c     ****   {
 526:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 527:Src/tim.c     **** 
 528:Src/tim.c     ****   /* USER CODE END TIM1_MspDeInit 0 */
 529:Src/tim.c     ****     /* Peripheral clock disable */
 530:Src/tim.c     ****     __HAL_RCC_TIM1_CLK_DISABLE();
 531:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 532:Src/tim.c     **** 
 533:Src/tim.c     ****   /* USER CODE END TIM1_MspDeInit 1 */
 534:Src/tim.c     ****   }
 535:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM2)
 1222              		.loc 1 535 0
 1223 0008 B3F1804F 		cmp	r3, #1073741824
 1224 000c 10D0     		beq	.L120
 536:Src/tim.c     ****   {
 537:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspDeInit 0 */
 538:Src/tim.c     **** 
 539:Src/tim.c     ****   /* USER CODE END TIM2_MspDeInit 0 */
 540:Src/tim.c     ****     /* Peripheral clock disable */
 541:Src/tim.c     ****     __HAL_RCC_TIM2_CLK_DISABLE();
 542:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 543:Src/tim.c     **** 
 544:Src/tim.c     ****   /* USER CODE END TIM2_MspDeInit 1 */
 545:Src/tim.c     ****   }
 546:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM3)
 1225              		.loc 1 546 0
 1226 000e 174A     		ldr	r2, .L124+4
 1227 0010 9342     		cmp	r3, r2
 1228 0012 13D0     		beq	.L121
 547:Src/tim.c     ****   {
 548:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspDeInit 0 */
 549:Src/tim.c     **** 
 550:Src/tim.c     ****   /* USER CODE END TIM3_MspDeInit 0 */
 551:Src/tim.c     ****     /* Peripheral clock disable */
 552:Src/tim.c     ****     __HAL_RCC_TIM3_CLK_DISABLE();
ARM GAS  /tmp/ccrgs2MM.s 			page 35


 553:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspDeInit 1 */
 554:Src/tim.c     **** 
 555:Src/tim.c     ****   /* USER CODE END TIM3_MspDeInit 1 */
 556:Src/tim.c     ****   }
 557:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM5)
 1229              		.loc 1 557 0
 1230 0014 164A     		ldr	r2, .L124+8
 1231 0016 9342     		cmp	r3, r2
 1232 0018 17D0     		beq	.L122
 558:Src/tim.c     ****   {
 559:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspDeInit 0 */
 560:Src/tim.c     **** 
 561:Src/tim.c     ****   /* USER CODE END TIM5_MspDeInit 0 */
 562:Src/tim.c     ****     /* Peripheral clock disable */
 563:Src/tim.c     ****     __HAL_RCC_TIM5_CLK_DISABLE();
 564:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspDeInit 1 */
 565:Src/tim.c     **** 
 566:Src/tim.c     ****   /* USER CODE END TIM5_MspDeInit 1 */
 567:Src/tim.c     ****   }
 568:Src/tim.c     ****   else if(tim_baseHandle->Instance==TIM8)
 1233              		.loc 1 568 0
 1234 001a 164A     		ldr	r2, .L124+12
 1235 001c 9342     		cmp	r3, r2
 1236 001e 1BD0     		beq	.L123
 1237              	.L113:
 569:Src/tim.c     ****   {
 570:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 0 */
 571:Src/tim.c     **** 
 572:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 0 */
 573:Src/tim.c     ****     /* Peripheral clock disable */
 574:Src/tim.c     ****     __HAL_RCC_TIM8_CLK_DISABLE();
 575:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 576:Src/tim.c     **** 
 577:Src/tim.c     ****   /* USER CODE END TIM8_MspDeInit 1 */
 578:Src/tim.c     ****   }
 579:Src/tim.c     **** }
 1238              		.loc 1 579 0
 1239 0020 7047     		bx	lr
 1240              	.L119:
 530:Src/tim.c     ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 1241              		.loc 1 530 0
 1242 0022 02F59C32 		add	r2, r2, #79872
 1243 0026 536C     		ldr	r3, [r2, #68]
 1244 0028 23F00103 		bic	r3, r3, #1
 1245 002c 5364     		str	r3, [r2, #68]
 1246 002e 7047     		bx	lr
 1247              	.L120:
 541:Src/tim.c     ****   /* USER CODE BEGIN TIM2_MspDeInit 1 */
 1248              		.loc 1 541 0
 1249 0030 114A     		ldr	r2, .L124+16
 1250 0032 136C     		ldr	r3, [r2, #64]
 1251 0034 23F00103 		bic	r3, r3, #1
 1252 0038 1364     		str	r3, [r2, #64]
 1253 003a 7047     		bx	lr
 1254              	.L121:
 552:Src/tim.c     ****   /* USER CODE BEGIN TIM3_MspDeInit 1 */
 1255              		.loc 1 552 0
ARM GAS  /tmp/ccrgs2MM.s 			page 36


 1256 003c 02F50D32 		add	r2, r2, #144384
 1257 0040 136C     		ldr	r3, [r2, #64]
 1258 0042 23F00203 		bic	r3, r3, #2
 1259 0046 1364     		str	r3, [r2, #64]
 1260 0048 7047     		bx	lr
 1261              	.L122:
 563:Src/tim.c     ****   /* USER CODE BEGIN TIM5_MspDeInit 1 */
 1262              		.loc 1 563 0
 1263 004a 02F50B32 		add	r2, r2, #142336
 1264 004e 136C     		ldr	r3, [r2, #64]
 1265 0050 23F00803 		bic	r3, r3, #8
 1266 0054 1364     		str	r3, [r2, #64]
 1267 0056 7047     		bx	lr
 1268              	.L123:
 574:Src/tim.c     ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 1269              		.loc 1 574 0
 1270 0058 02F59A32 		add	r2, r2, #78848
 1271 005c 536C     		ldr	r3, [r2, #68]
 1272 005e 23F00203 		bic	r3, r3, #2
 1273 0062 5364     		str	r3, [r2, #68]
 1274              		.loc 1 579 0
 1275 0064 DCE7     		b	.L113
 1276              	.L125:
 1277 0066 00BF     		.align	2
 1278              	.L124:
 1279 0068 00000140 		.word	1073807360
 1280 006c 00040040 		.word	1073742848
 1281 0070 000C0040 		.word	1073744896
 1282 0074 00040140 		.word	1073808384
 1283 0078 00380240 		.word	1073887232
 1284              		.cfi_endproc
 1285              	.LFE147:
 1287              		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 1288              		.align	1
 1289              		.global	HAL_TIM_PWM_MspDeInit
 1290              		.syntax unified
 1291              		.thumb
 1292              		.thumb_func
 1293              		.fpu fpv5-sp-d16
 1295              	HAL_TIM_PWM_MspDeInit:
 1296              	.LFB148:
 580:Src/tim.c     **** 
 581:Src/tim.c     **** void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
 582:Src/tim.c     **** {
 1297              		.loc 1 582 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 1301              		@ link register save eliminated.
 1302              	.LVL77:
 583:Src/tim.c     **** 
 584:Src/tim.c     ****   if(tim_pwmHandle->Instance==TIM12)
 1303              		.loc 1 584 0
 1304 0000 0268     		ldr	r2, [r0]
 1305 0002 054B     		ldr	r3, .L129
 1306 0004 9A42     		cmp	r2, r3
 1307 0006 00D0     		beq	.L128
ARM GAS  /tmp/ccrgs2MM.s 			page 37


 1308              	.L126:
 585:Src/tim.c     ****   {
 586:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspDeInit 0 */
 587:Src/tim.c     **** 
 588:Src/tim.c     ****   /* USER CODE END TIM12_MspDeInit 0 */
 589:Src/tim.c     ****     /* Peripheral clock disable */
 590:Src/tim.c     ****     __HAL_RCC_TIM12_CLK_DISABLE();
 591:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspDeInit 1 */
 592:Src/tim.c     **** 
 593:Src/tim.c     ****   /* USER CODE END TIM12_MspDeInit 1 */
 594:Src/tim.c     ****   }
 595:Src/tim.c     **** } 
 1309              		.loc 1 595 0
 1310 0008 7047     		bx	lr
 1311              	.L128:
 590:Src/tim.c     ****   /* USER CODE BEGIN TIM12_MspDeInit 1 */
 1312              		.loc 1 590 0
 1313 000a 044A     		ldr	r2, .L129+4
 1314 000c 136C     		ldr	r3, [r2, #64]
 1315 000e 23F04003 		bic	r3, r3, #64
 1316 0012 1364     		str	r3, [r2, #64]
 1317              		.loc 1 595 0
 1318 0014 F8E7     		b	.L126
 1319              	.L130:
 1320 0016 00BF     		.align	2
 1321              	.L129:
 1322 0018 00180040 		.word	1073747968
 1323 001c 00380240 		.word	1073887232
 1324              		.cfi_endproc
 1325              	.LFE148:
 1327              		.comm	htim12,64,4
 1328              		.comm	htim8,64,4
 1329              		.comm	htim5,64,4
 1330              		.comm	htim3,64,4
 1331              		.comm	htim2,64,4
 1332              		.comm	htim1,64,4
 1333              		.section	.rodata.MX_TIM8_Init.str1.4,"aMS",%progbits,1
 1334              		.align	2
 1335              	.LC0:
 1336 0000 5372632F 		.ascii	"Src/tim.c\000"
 1336      74696D2E 
 1336      6300
 1337              		.text
 1338              	.Letext0:
 1339              		.file 2 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_defa
 1340              		.file 3 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h
 1341              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1342              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1343              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1344              		.file 7 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 1345              		.file 8 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 1346              		.file 9 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include
 1347              		.file 10 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 1348              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1349              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1350              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1351              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
ARM GAS  /tmp/ccrgs2MM.s 			page 38


 1352              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1353              		.file 16 "Inc/tim.h"
ARM GAS  /tmp/ccrgs2MM.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
     /tmp/ccrgs2MM.s:18     .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:25     .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/ccrgs2MM.s:119    .text.MX_TIM8_Init:000000000000006c $d
                            *COM*:0000000000000040 htim8
     /tmp/ccrgs2MM.s:126    .text.HAL_TIM_Base_MspInit:0000000000000000 $t
     /tmp/ccrgs2MM.s:133    .text.HAL_TIM_Base_MspInit:0000000000000000 HAL_TIM_Base_MspInit
     /tmp/ccrgs2MM.s:241    .text.HAL_TIM_Base_MspInit:0000000000000094 $d
     /tmp/ccrgs2MM.s:250    .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
     /tmp/ccrgs2MM.s:257    .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
     /tmp/ccrgs2MM.s:296    .text.HAL_TIM_PWM_MspInit:0000000000000028 $d
     /tmp/ccrgs2MM.s:301    .text.HAL_TIM_MspPostInit:0000000000000000 $t
     /tmp/ccrgs2MM.s:308    .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
     /tmp/ccrgs2MM.s:470    .text.HAL_TIM_MspPostInit:00000000000000b8 $d
     /tmp/ccrgs2MM.s:482    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:489    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccrgs2MM.s:672    .text.MX_TIM1_Init:00000000000000e4 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccrgs2MM.s:679    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:686    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccrgs2MM.s:815    .text.MX_TIM2_Init:000000000000009c $d
                            *COM*:0000000000000040 htim2
     /tmp/ccrgs2MM.s:821    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:828    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccrgs2MM.s:957    .text.MX_TIM3_Init:000000000000009c $d
                            *COM*:0000000000000040 htim3
     /tmp/ccrgs2MM.s:964    .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:971    .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccrgs2MM.s:1101   .text.MX_TIM5_Init:00000000000000a4 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccrgs2MM.s:1108   .text.MX_TIM12_Init:0000000000000000 $t
     /tmp/ccrgs2MM.s:1115   .text.MX_TIM12_Init:0000000000000000 MX_TIM12_Init
     /tmp/ccrgs2MM.s:1195   .text.MX_TIM12_Init:0000000000000058 $d
                            *COM*:0000000000000040 htim12
     /tmp/ccrgs2MM.s:1202   .text.HAL_TIM_Base_MspDeInit:0000000000000000 $t
     /tmp/ccrgs2MM.s:1209   .text.HAL_TIM_Base_MspDeInit:0000000000000000 HAL_TIM_Base_MspDeInit
     /tmp/ccrgs2MM.s:1279   .text.HAL_TIM_Base_MspDeInit:0000000000000068 $d
     /tmp/ccrgs2MM.s:1288   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 $t
     /tmp/ccrgs2MM.s:1295   .text.HAL_TIM_PWM_MspDeInit:0000000000000000 HAL_TIM_PWM_MspDeInit
     /tmp/ccrgs2MM.s:1322   .text.HAL_TIM_PWM_MspDeInit:0000000000000018 $d
     /tmp/ccrgs2MM.s:1334   .rodata.MX_TIM8_Init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
_Error_Handler
HAL_GPIO_Init
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
