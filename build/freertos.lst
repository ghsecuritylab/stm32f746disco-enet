ARM GAS  /tmp/cciykreH.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	StartDefaultTask:
  26              	.LFB147:
  27              		.file 1 "Src/freertos.c"
   1:Src/freertos.c **** /**
   2:Src/freertos.c ****   ******************************************************************************
   3:Src/freertos.c ****   * File Name          : freertos.c
   4:Src/freertos.c ****   * Description        : Code for freertos applications
   5:Src/freertos.c ****   ******************************************************************************
   6:Src/freertos.c ****   * This notice applies to any and all portions of this file
   7:Src/freertos.c ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/freertos.c ****   * USER CODE END. Other portions of this file, whether 
   9:Src/freertos.c ****   * inserted by the user or by software development tools
  10:Src/freertos.c ****   * are owned by their respective copyright owners.
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * Copyright (c) 2018 STMicroelectronics International N.V. 
  13:Src/freertos.c ****   * All rights reserved.
  14:Src/freertos.c ****   *
  15:Src/freertos.c ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/freertos.c ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/freertos.c ****   *
  18:Src/freertos.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/freertos.c ****   *    this list of conditions and the following disclaimer.
  20:Src/freertos.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/freertos.c ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/freertos.c ****   *    and/or other materials provided with the distribution.
  23:Src/freertos.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/freertos.c ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/freertos.c ****   *    derived from this software without specific written permission.
  26:Src/freertos.c ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/freertos.c ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/freertos.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/freertos.c ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/freertos.c ****   *    this license is void and will automatically terminate your rights under 
  31:Src/freertos.c ****   *    this license. 
ARM GAS  /tmp/cciykreH.s 			page 2


  32:Src/freertos.c ****   *
  33:Src/freertos.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/freertos.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/freertos.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/freertos.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/freertos.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/freertos.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/freertos.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/freertos.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/freertos.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/freertos.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/freertos.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/freertos.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/freertos.c ****   *
  46:Src/freertos.c ****   ******************************************************************************
  47:Src/freertos.c ****   */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  50:Src/freertos.c **** #include "FreeRTOS.h"
  51:Src/freertos.c **** #include "task.h"
  52:Src/freertos.c **** #include "cmsis_os.h"
  53:Src/freertos.c **** 
  54:Src/freertos.c **** /* USER CODE BEGIN Includes */     
  55:Src/freertos.c **** 
  56:Src/freertos.c **** /* USER CODE END Includes */
  57:Src/freertos.c **** 
  58:Src/freertos.c **** /* Variables -----------------------------------------------------------------*/
  59:Src/freertos.c **** osThreadId defaultTaskHandle;
  60:Src/freertos.c **** 
  61:Src/freertos.c **** /* USER CODE BEGIN Variables */
  62:Src/freertos.c **** 
  63:Src/freertos.c **** /* USER CODE END Variables */
  64:Src/freertos.c **** 
  65:Src/freertos.c **** /* Function prototypes -------------------------------------------------------*/
  66:Src/freertos.c **** void StartDefaultTask(void const * argument);
  67:Src/freertos.c **** 
  68:Src/freertos.c **** extern void MX_FATFS_Init(void);
  69:Src/freertos.c **** extern void MX_USB_HOST_Init(void);
  70:Src/freertos.c **** extern void MX_LWIP_Init(void);
  71:Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  72:Src/freertos.c **** 
  73:Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  74:Src/freertos.c **** 
  75:Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  76:Src/freertos.c **** 
  77:Src/freertos.c **** /* Hook prototypes */
  78:Src/freertos.c **** void vApplicationIdleHook(void);
  79:Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  80:Src/freertos.c **** void vApplicationMallocFailedHook(void);
  81:Src/freertos.c **** 
  82:Src/freertos.c **** /* USER CODE BEGIN 2 */
  83:Src/freertos.c **** __weak void vApplicationIdleHook( void )
  84:Src/freertos.c **** {
  85:Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  86:Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  87:Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  88:Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
ARM GAS  /tmp/cciykreH.s 			page 3


  89:Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
  90:Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  91:Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  92:Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  93:Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  94:Src/freertos.c **** }
  95:Src/freertos.c **** /* USER CODE END 2 */
  96:Src/freertos.c **** 
  97:Src/freertos.c **** /* USER CODE BEGIN 4 */
  98:Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  99:Src/freertos.c **** {
 100:Src/freertos.c ****    /* Run time stack overflow checking is performed if
 101:Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
 102:Src/freertos.c ****    called if a stack overflow is detected. */
 103:Src/freertos.c **** }
 104:Src/freertos.c **** /* USER CODE END 4 */
 105:Src/freertos.c **** 
 106:Src/freertos.c **** /* USER CODE BEGIN 5 */
 107:Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
 108:Src/freertos.c **** {
 109:Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
 110:Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
 111:Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
 112:Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
 113:Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
 114:Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
 115:Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 116:Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 117:Src/freertos.c ****    to query the size of free heap space that remains (although it does not
 118:Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 119:Src/freertos.c **** }
 120:Src/freertos.c **** /* USER CODE END 5 */
 121:Src/freertos.c **** 
 122:Src/freertos.c **** /* Init FreeRTOS */
 123:Src/freertos.c **** 
 124:Src/freertos.c **** void MX_FREERTOS_Init(void) {
 125:Src/freertos.c ****   /* USER CODE BEGIN Init */
 126:Src/freertos.c ****        
 127:Src/freertos.c ****   /* USER CODE END Init */
 128:Src/freertos.c **** 
 129:Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 130:Src/freertos.c ****   /* add mutexes, ... */
 131:Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
 132:Src/freertos.c **** 
 133:Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 134:Src/freertos.c ****   /* add semaphores, ... */
 135:Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 136:Src/freertos.c **** 
 137:Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 138:Src/freertos.c ****   /* start timers, add new ones, ... */
 139:Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 140:Src/freertos.c **** 
 141:Src/freertos.c ****   /* Create the thread(s) */
 142:Src/freertos.c ****   /* definition and creation of defaultTask */
 143:Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 144:Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 145:Src/freertos.c **** 
ARM GAS  /tmp/cciykreH.s 			page 4


 146:Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 147:Src/freertos.c ****   /* add threads, ... */
 148:Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 149:Src/freertos.c **** 
 150:Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 151:Src/freertos.c ****   /* add queues, ... */
 152:Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 153:Src/freertos.c **** }
 154:Src/freertos.c **** 
 155:Src/freertos.c **** /* StartDefaultTask function */
 156:Src/freertos.c **** void StartDefaultTask(void const * argument)
 157:Src/freertos.c **** {
  28              		.loc 1 157 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
 158:Src/freertos.c ****   /* init code for FATFS */
 159:Src/freertos.c ****   MX_FATFS_Init();
  39              		.loc 1 159 0
  40 0002 FFF7FEFF 		bl	MX_FATFS_Init
  41              	.LVL1:
 160:Src/freertos.c **** 
 161:Src/freertos.c ****   /* init code for USB_HOST */
 162:Src/freertos.c ****   MX_USB_HOST_Init();
  42              		.loc 1 162 0
  43 0006 FFF7FEFF 		bl	MX_USB_HOST_Init
  44              	.LVL2:
 163:Src/freertos.c **** 
 164:Src/freertos.c ****   /* init code for LWIP */
 165:Src/freertos.c ****   MX_LWIP_Init();
  45              		.loc 1 165 0
  46 000a FFF7FEFF 		bl	MX_LWIP_Init
  47              	.LVL3:
  48              	.L2:
 166:Src/freertos.c **** 
 167:Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 168:Src/freertos.c ****   /* Infinite loop */
 169:Src/freertos.c ****   for(;;)
 170:Src/freertos.c ****   {
 171:Src/freertos.c ****     osDelay(1);
  49              		.loc 1 171 0 discriminator 1
  50 000e 0120     		movs	r0, #1
  51 0010 FFF7FEFF 		bl	osDelay
  52              	.LVL4:
  53 0014 FBE7     		b	.L2
  54              		.cfi_endproc
  55              	.LFE147:
  57              		.section	.text.vApplicationIdleHook,"ax",%progbits
  58              		.align	1
  59              		.weak	vApplicationIdleHook
ARM GAS  /tmp/cciykreH.s 			page 5


  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-sp-d16
  65              	vApplicationIdleHook:
  66              	.LFB143:
  84:Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  67              		.loc 1 84 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  94:Src/freertos.c **** /* USER CODE END 2 */
  72              		.loc 1 94 0
  73 0000 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE143:
  77              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  78              		.align	1
  79              		.weak	vApplicationStackOverflowHook
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv5-sp-d16
  85              	vApplicationStackOverflowHook:
  86              	.LFB144:
  99:Src/freertos.c ****    /* Run time stack overflow checking is performed if
  87              		.loc 1 99 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL5:
 103:Src/freertos.c **** /* USER CODE END 4 */
  93              		.loc 1 103 0
  94 0000 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE144:
  98              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  99              		.align	1
 100              		.weak	vApplicationMallocFailedHook
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv5-sp-d16
 106              	vApplicationMallocFailedHook:
 107              	.LFB145:
 108:Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
 108              		.loc 1 108 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 119:Src/freertos.c **** /* USER CODE END 5 */
 113              		.loc 1 119 0
 114 0000 7047     		bx	lr
 115              		.cfi_endproc
ARM GAS  /tmp/cciykreH.s 			page 6


 116              	.LFE145:
 118              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 119              		.align	1
 120              		.global	MX_FREERTOS_Init
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv5-sp-d16
 126              	MX_FREERTOS_Init:
 127              	.LFB146:
 124:Src/freertos.c ****   /* USER CODE BEGIN Init */
 128              		.loc 1 124 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 24
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132 0000 30B5     		push	{r4, r5, lr}
 133              	.LCFI1:
 134              		.cfi_def_cfa_offset 12
 135              		.cfi_offset 4, -12
 136              		.cfi_offset 5, -8
 137              		.cfi_offset 14, -4
 138 0002 87B0     		sub	sp, sp, #28
 139              	.LCFI2:
 140              		.cfi_def_cfa_offset 40
 143:Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 141              		.loc 1 143 0
 142 0004 01AC     		add	r4, sp, #4
 143 0006 064D     		ldr	r5, .L9
 144 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 145 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 146 000c 2B68     		ldr	r3, [r5]
 147 000e 2360     		str	r3, [r4]
 144:Src/freertos.c **** 
 148              		.loc 1 144 0
 149 0010 0021     		movs	r1, #0
 150 0012 01A8     		add	r0, sp, #4
 151 0014 FFF7FEFF 		bl	osThreadCreate
 152              	.LVL6:
 153 0018 024B     		ldr	r3, .L9+4
 154 001a 1860     		str	r0, [r3]
 153:Src/freertos.c **** 
 155              		.loc 1 153 0
 156 001c 07B0     		add	sp, sp, #28
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 12
 159              		@ sp needed
 160 001e 30BD     		pop	{r4, r5, pc}
 161              	.L10:
 162              		.align	2
 163              	.L9:
 164 0020 00000000 		.word	.LANCHOR0
 165 0024 00000000 		.word	defaultTaskHandle
 166              		.cfi_endproc
 167              	.LFE146:
 169              		.comm	defaultTaskHandle,4,4
 170              		.section	.rodata
 171              		.align	2
ARM GAS  /tmp/cciykreH.s 			page 7


 172              		.set	.LANCHOR0,. + 0
 173              	.LC2:
 174 0000 00000000 		.word	.LC0
 175 0004 00000000 		.word	StartDefaultTask
 176 0008 0000     		.short	0
 177 000a 0000     		.space	2
 178 000c 00000000 		.word	0
 179 0010 00100000 		.word	4096
 180              		.section	.rodata.str1.4,"aMS",%progbits,1
 181              		.align	2
 182              	.LC0:
 183 0000 64656661 		.ascii	"defaultTask\000"
 183      756C7454 
 183      61736B00 
 184              		.text
 185              	.Letext0:
 186              		.file 2 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_defa
 187              		.file 3 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h
 188              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 189              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 190              		.file 6 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 191              		.file 7 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 192              		.file 8 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include
 193              		.file 9 "/home/warranyu/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 194              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 195              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/cciykreH.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/cciykreH.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/cciykreH.s:25     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cciykreH.s:58     .text.vApplicationIdleHook:0000000000000000 $t
     /tmp/cciykreH.s:65     .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
     /tmp/cciykreH.s:78     .text.vApplicationStackOverflowHook:0000000000000000 $t
     /tmp/cciykreH.s:85     .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
     /tmp/cciykreH.s:99     .text.vApplicationMallocFailedHook:0000000000000000 $t
     /tmp/cciykreH.s:106    .text.vApplicationMallocFailedHook:0000000000000000 vApplicationMallocFailedHook
     /tmp/cciykreH.s:119    .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/cciykreH.s:126    .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/cciykreH.s:164    .text.MX_FREERTOS_Init:0000000000000020 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/cciykreH.s:171    .rodata:0000000000000000 $d
     /tmp/cciykreH.s:181    .rodata.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
MX_FATFS_Init
MX_USB_HOST_Init
MX_LWIP_Init
osDelay
osThreadCreate
